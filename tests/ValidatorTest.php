<?php
/**
 * @package wsdl2phpTest
 */

/**
 * Including all needed files
 */
require_once 'PHPUnit/Framework.php';

require_once \dirname(__FILE__).'/../src/Validator.php';

/**
 * Test class for Wsdl2PhpValidator.
 * Generated by PHPUnit on 2009-11-11 at 00:56:02.
 * 
 * @package wsdl2phpTest
 */
class ValidatorTest extends \PHPUnit_Framework_TestCase
{
  /**
   * @var Wsdl2PhpValidator
   */
  protected $object;

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp()
  {
    $this->object = null;
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown()
  {
  }

  /**
   * Testing the validate class function
   */
  public function testValidateClass()
  {
    $this->assertEquals('foo', \wsdl2php\Validator::validateClass('foo'));
    $this->assertEquals('foobar', \wsdl2php\Validator::validateClass('foo-bar'));
    $this->assertEquals('Foo', \wsdl2php\Validator::validateClass('Foo'));
    $this->assertEquals('foo523', \wsdl2php\Validator::validateClass('foo523'));

    $this->setExpectedException('\wsdl2php\ValidationException');
    \wsdl2php\Validator::validateClass('SoapClient');

    $this->setExpectedException('\wsdl2php\ValidationException');
    $this->assertEquals('for', \wsdl2php\Validator::validateClass('for')); // for is reserved keyword
  }

  /**
   * Testing the validate class function with a reserved keyword
   */
  public function testValidateClassReservedKeyword()
  {
    $this->setExpectedException('\wsdl2php\ValidationException');
    $this->assertEquals('for', \wsdl2php\Validator::validateClass('for')); // for is reserved keyword
    $this->assertEquals('List', \wsdl2php\Validator::validateClass('List')); // for is reserved keyword
  }

  /**
   * Testing the validate class function with another reserved keyword
   */
  public function testValidateClassReservedKeyword2()
  {
    $this->setExpectedException('\wsdl2php\ValidationException');
    $this->assertEquals('List', \wsdl2php\Validator::validateClass('List')); // list is reserved keyword. PHP is not case sensitive in keywords
  }

  /**
   * Test the typename
   */
  public function testValidateType()
  {
    $this->assertEquals('foo', \wsdl2php\Validator::validateType('foo'));
    $this->assertEquals('foobar', \wsdl2php\Validator::validateType('foo-bar'));
    $this->assertEquals('Foo', \wsdl2php\Validator::validateType('Foo'));
    $this->assertEquals('foo523', \wsdl2php\Validator::validateType('foo523'));
    $this->assertEquals('array', \wsdl2php\Validator::validateType('arrayOf_test'));
    $this->assertEquals('array', \wsdl2php\Validator::validateType('arrayOfTest'));
    $this->assertEquals('array', \wsdl2php\Validator::validateType('test[]'));
    $this->assertEquals('array', \wsdl2php\Validator::validateType('ArrayOf_xsd_int'));

    $this->assertEquals('int', \wsdl2php\Validator::validateType('nonNegativeInteger'));
    $this->assertEquals('float', \wsdl2php\Validator::validateType('float'));
    $this->assertEquals('string', \wsdl2php\Validator::validateType('normalizedString'));
    $this->assertEquals('array', \wsdl2php\Validator::validateType('ArrayOfFoo'));
    $this->assertEquals('array', \wsdl2php\Validator::validateType('Foo[]'));

    $this->setExpectedException('\wsdl2php\ValidationException');
    $this->assertEquals('and', \wsdl2php\Validator::validateType('and')); // and is reserved keyword
  }

  /**
   * test the name
   */
  public function testValidateNamingConvention()
  {
    $this->assertEquals('foo', \wsdl2php\Validator::validateNamingConvention('foo'));
    $this->assertEquals('foobar', \wsdl2php\Validator::validateNamingConvention('foo-bar'));
    $this->assertEquals('Foo', \wsdl2php\Validator::validateNamingConvention('Foo'));
    $this->assertEquals('foo523', \wsdl2php\Validator::validateNamingConvention('foo523'));
    $this->assertEquals('a123foo', \wsdl2php\Validator::validateNamingConvention('123foo'));
    $this->assertEquals('a123foo123', \wsdl2php\Validator::validateNamingConvention('123foo$123'));
    $this->assertEquals('a123foo', \wsdl2php\Validator::validateNamingConvention('123f|o|o'));
  }
}
?>
