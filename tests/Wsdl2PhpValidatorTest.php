<?php
require_once 'PHPUnit/Framework.php';

require_once dirname(__FILE__).'/../Wsdl2PhpValidator.php';

/**
 * Test class for Wsdl2PhpValidator.
 * Generated by PHPUnit on 2009-11-11 at 00:56:02.
 */
class Wsdl2PhpValidatorTest extends PHPUnit_Framework_TestCase
{
  /**
   * @var Wsdl2PhpValidator
   */
  protected $object;

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp()
  {
    $this->object = new Wsdl2PhpValidator;
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown()
  {
  }

  /**
   * 
   */
  public function testValidateClass()
  {
    $this->assertEquals('foo', $this->object->validateClass('foo'));
    $this->assertEquals('foobar', $this->object->validateClass('foo-bar'));
    $this->assertEquals('Foo', $this->object->validateClass('Foo'));
    $this->assertEquals('foo523', $this->object->validateClass('foo523'));

    $this->setExpectedException('Wsdl2PhpValidationException');
    $this->assertEquals('foo', $this->object->validateClass('foo')); // same class cant be defined twice

    $this->setExpectedException('Wsdl2PhpValidationException');
    $this->assertEquals('for', $this->object->validateClass('for')); // for is reserved keyword
  }

  /**
   * 
   */
  public function testValidateType()
  {
    $this->assertEquals('foo', $this->object->validateType('foo'));
    $this->assertEquals('foobar', $this->object->validateType('foo-bar'));
    $this->assertEquals('Foo', $this->object->validateType('Foo'));
    $this->assertEquals('foo523', $this->object->validateType('foo523'));

    $this->assertEquals('integer', $this->object->validateType('nonNegativeInteger')); // should result in integer
    $this->assertEquals('double', $this->object->validateType('float')); // should result in double
    $this->assertEquals('string', $this->object->validateType('normalizedString')); // should result in string

    $this->setExpectedException('Wsdl2PhpValidationException');
    $this->assertEquals('and', $this->object->validateType('and')); // and is reserved keyword
  }

  /**
   * 
   */
  public function testValidateNamingConvention()
  {
    $this->assertEquals('foo', $this->object->validateNamingConvention('foo'));
    $this->assertEquals('foobar', $this->object->validateNamingConvention('foo-bar'));
    $this->assertEquals('Foo', $this->object->validateNamingConvention('Foo'));
    $this->assertEquals('foo523', $this->object->validateNamingConvention('foo523'));
    $this->assertEquals('foo', $this->object->validateNamingConvention('123foo'));
    $this->assertEquals('foo123', $this->object->validateNamingConvention('123foo$123'));
    $this->assertEquals('foo', $this->object->validateNamingConvention('123f|o|o'));
  }
}
?>
