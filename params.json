{"name":"Wsdl2phpgenerator","tagline":"Simple utility and class library for generating php classes from a wsdl file.","body":"# wsdl2phpgenerator\r\n[![Latest Stable Version](https://poser.pugx.org/wsdl2phpgenerator/wsdl2phpgenerator/v/stable.png)](https://packagist.org/packages/wsdl2phpgenerator/wsdl2phpgenerator)\r\n[![Build Status](https://travis-ci.org/wsdl2phpgenerator/wsdl2phpgenerator.svg?branch=master)](https://travis-ci.org/wsdl2phpgenerator/wsdl2phpgenerator)\r\n[![Code Coverage](https://scrutinizer-ci.com/g/wsdl2phpgenerator/wsdl2phpgenerator/badges/coverage.png?s=91798255fd973950b1e2d7478f99d6f6f80cf6da)](https://scrutinizer-ci.com/g/wsdl2phpgenerator/wsdl2phpgenerator/)\r\n[![Scrutinizer Quality Score](https://scrutinizer-ci.com/g/wsdl2phpgenerator/wsdl2phpgenerator/badges/quality-score.png?s=23e602a86f75a79a2f1013caac99558f2464ce74)](https://scrutinizer-ci.com/g/wsdl2phpgenerator/wsdl2phpgenerator/)\r\n[![Dependency Status](https://www.versioneye.com/user/projects/52697615632bac67b2002e93/badge.png)](https://www.versioneye.com/user/projects/52697615632bac67b2002e93)\r\n\r\nSimple WSDL to PHP classes converter. Takes a WSDL file and outputs class files ready to use.\r\n\r\nUses the [MIT license](http://www.opensource.org/licenses/mit-license.php).\r\n\r\n## New major version: 3.0\r\n\r\nA new major version of wsdl2phpgenerator has recently been released: 3.0.\r\n\r\nThis introduces changes to both configuration and generated code. The changes makes it more flexible to use, easier to include in other projects, promotes contributions and reduces maintenance.\r\n\r\n2.x users are encourage to read [a walkthrough of what is new in 3.0](docs/whats-new-in-3.0.md).\r\n\r\n## Contributors\r\nOriginally developed by [@walle](https://github.com/walle) and includes bug fixes and improvements from [@vakopian](https://github.com/vakopian), [@statikbe](https://github.com/statikbe/),\r\n[@ecolinet](https://github.com/ecolinet), [@nuth](https://github.com/nuth/), [@chriskl](https://github.com/chriskl/), [@RSully](https://github.com/RSully/), [@jrbasso](https://github.com/jrbasso/),\r\n[@dypa](https://github.com/dypa/), [@Lafriks](https://github.com/Lafriks/), [@SamMousa](https://github.com/SamMousa/), [@xstefanox](https://github.com/xstefanox/), [@garex](https://github.com/garex/), [@honzap](https://github.com/honzap/), [@jk](https://github.com/jk/), [@sheeep](https://github.com/sheeep/), [@colinodell](https://github.com/colinodell/), [@red-led](https://github.com/red-led/) and [@kasperg](https://github.com/kasperg/).\r\n\r\nPull requests are very welcome. Please read [our guidelines for contributing](https://github.com/wsdl2phpgenerator/wsdl2phpgenerator/blob/master/CONTRIBUTING.md).\r\n\r\n## Mailing list\r\n\r\nThere is a mailing list for the project at [https://groups.google.com/forum/#!forum/wsdl2phpgenerator](https://groups.google.com/forum/#!forum/wsdl2phpgenerator)\r\n\r\n## Installation\r\n\r\nAdd wsdl2phpgenerator to your [Composer](https://getcomposer.org/doc/00-intro.md) project:\r\n\r\n```bash\r\ncomposer require wsdl2phpgenerator/wsdl2phpgenerator\r\n```\r\n\r\nThe project will also be available as [a command line application](https://github.com/wsdl2phpgenerator/wsdl2phpgenerator-cli) which can be downloaded as a phar file.\r\n\r\n\r\n## Usage\r\n\r\nTo generate classes create a `Generator` instance and pass it a `Config` instance.\r\n\r\n```php\r\n$generator = new \\Wsdl2PhpGenerator\\Generator();\r\n$generator->generate(\r\n\tnew \\Wsdl2PhpGenerator\\Config(array(\r\n        'inputFile' => 'input.wsdl',\r\n        'outputDir' => '/tmp/output'\r\n    ))\r\n);\r\n```\r\n\r\nAfter generating the code then configure your existing autoloader accordingly. The generated code also comes with a simple `autoload.php` file which can be included directly. This registers a simple autoloader for the generated classes.\r\n\r\n#### Example usage\r\n\r\nThe following example will generate code from a web service, load the generated classes, call the web service and return the result over the course of a single process.\r\n\r\n```php\r\n$generator = new \\Wsdl2PhpGenerator\\Generator();\r\n$generator->generate(\r\n\tnew \\Wsdl2PhpGenerator\\Config(array(\r\n        'inputFile' => 'http://www.webservicex.net/CurrencyConvertor.asmx?WSDL',\r\n        'outputDir' => '/tmp/CurrencyConverter'\r\n    ))\r\n);\r\n\r\nrequire '/tmp/CurrencyConverter/autoload.php';\r\n\r\n// A class will generated representing the service.\r\n// It is named after the element in the WSDL and has a method for each operation.\r\n$service = new \\CurrencyConvertor();\r\n$request = new \\ConversionRate(\\Currency::USD, \\Currency::EUR);\r\n$response = $service->ConversionRate($request);\r\n\r\necho $response->getConversionRateResult();\r\n```\r\n\r\nNote that this is not recommended usage. Normally code generation and web services calls will be two separate processes.\r\n\r\n### Options\r\n\r\nThe generator supports a range of options which can be set in the configuration.\r\n\r\n#### `inputFile`\r\n\r\nThe path or url to the WSDL to generate classes from.\r\n\r\n#### `outputDir`\r\n\r\nThe directory to place the generated classes in. It will be created if it does not already exist.\r\n\r\n#### `namespaceName`\r\n\r\nThe [namespace](http://php.net/manual/en/language.namespaces.php) to use for the generated classes. If not set classes will be generated without a namespace.\r\n\r\n\r\n##### Example usage\r\n\r\nThe following configuration will place generated code from the [CDYNE Weather web service](http://wiki.cdyne.com/?title=CDYNE_Weather) under the `CDyne\\Weather` namespace:\r\n\r\n```php\r\n$generator = new \\Wsdl2PhpGenerator\\Generator();\r\n$generator->generate(\r\n    new \\Wsdl2PhpGenerator\\Config(array(\r\n        'inputFile' => 'http://wsf.cdyne.com/WeatherWS/Weather.asmx?wsdl',\r\n        'outputDir' => '/tmp/weather'\r\n        'namespaceName' => 'CDyne\\Weather',\r\n    ))\r\n);\r\n```\r\n\r\n#### `classNames`\r\n\r\nA comma-separared list or array of class names to generate. All other classes in the WSDL will be ignored.\r\n\r\n##### Example usage\r\n\r\nThe following configuration will only generate `AmazonEC2` and `CopyImageType` classes from the Amazon EC2 webservice.\r\n\r\n```php\r\n$generator = new \\Wsdl2PhpGenerator\\Generator();\r\n$generator->generate(\r\n    new \\Wsdl2PhpGenerator\\Config(array(\r\n        'inputFile' => 'https://s3.amazonaws.com/ec2-downloads/2013-10-01.ec2.wsdl',\r\n        'outputDir' => '/tmp/amazon'\r\n        'classNames' => 'AmazonEC2, CopyImageType',\r\n    ))\r\n);\r\n```\r\n\r\n#### `sharedTypes`\r\n\r\nIf enabled this makes all types with the same identify use the same class and only generate it once. The default solution is to prepend numbering to avoid name clashes.\r\n\r\n#### `constructorParamsDefaultToNull`\r\n\r\nIf enabled this sets the default value of all parameters in all constructors to `null`. If this is used then properties must be set using accessors.\r\n\r\n#### `soapClientClass`\r\n\r\nThe base class to use for generated services. This should be a subclass of the [PHP `SoapClient`](http://php.net/manual/en/class.soapclient.php).\r\n\r\nExamples of third party SOAP client implementations which can be used:\r\n\r\n* [BeSimpleSoapClient](https://github.com/BeSimple/BeSimpleSoapClient)\r\n* [ZendFramework2 SOAP Component](https://github.com/zendframework/Component_ZendSoap) \r\n* [soap-plus](https://github.com/dcarbone/soap-plus)\r\n* [SoapClientEx](https://gist.github.com/RobThree/4117914)\r\n\r\nNote that is is the responsibility of the surrounding code to ensure that the base class is available during code generation and when calling web services.\r\n\r\n##### Example usage\r\n\r\nThe following configuration will use the BeSimple SOAP client as base class:\r\n\r\n```php\r\n$generator = new \\Wsdl2PhpGenerator\\Generator();\r\n$generator->generate(\r\n    new \\Wsdl2PhpGenerator\\Config(array(\r\n        'inputFile' => 'input.wsdl',\r\n        'outputDir' => '/tmp/output'\r\n        'soapClientClass' => '\\BeSimple\\SoapClient\\SoapClient'\r\n    ))\r\n);\r\n```\r\n\r\n#### `soapClientOptions`\r\n\r\nAn array of configuration options to pass to the SoapClient. They will be used when accessing the WSDL to generate the code and as defaults for subsequent requests to the SOAP service. The PHP documentation has [a list of supported options](http://php.net/manual/en/soapclient.soapclient.php#refsect1-soapclient.soapclient-parameters).\r\n\r\nThe list of options for the client can be extended by using more advanced `SoapClient` implementations.\r\n\r\nNote that wsdl2phpgenerator expects the `features` option to contain `SOAP_SINGLE_ELEMENT_ARRAYS`. [This ensures that type hints are consistent even if sequences only contain one element](http://php.net/manual/en/soapclient.soapclient.php#73082). If the `features` option is set explicitly in `soapClientOptions` the `SOAP_SINGLE_ELEMENT_ARRAYS` must also be added explicitly.\r\n\r\n##### Example usage\r\n\r\nThe following configuration will enable basic authentication and set the connection timeout to 60 seconds.\r\n\r\n```php\r\n$generator = new \\Wsdl2PhpGenerator\\Generator();\r\n$generator->generate(\r\n    new \\Wsdl2PhpGenerator\\Config(array(\r\n        'inputFile' => 'input.wsdl',\r\n        'outputDir' => '/tmp/output'\r\n        'soapClientOptions' => array(\r\n        \t'authentication' => SOAP_AUTHENTICATION_BASIC,\r\n        \t'login' => 'username',\r\n        \t'password' => 'secret'\r\n        \t'connection_timeout' => 60,\r\n    ))\r\n);\r\n````\r\n\r\n## Versioning\r\n\r\nThis project aims to use [semantic versioning](http://semver.org/). The following constitutes the public API:\r\n\r\n  * `\\Wsdl2PhpGenerator\\GeneratorInterface`\r\n  * `\\Wsdl2PhpGenerator\\ConfigInterface`\r\n  * Generated code\r\n\r\nBackwards incompatible changes to these means that the major version will be increased. Additional features and bug fixes increate minor and patch versions.","google":"UA-10800077-11","note":"Don't delete this file! It's used internally to help with page regeneration."}